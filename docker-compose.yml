version: '3.8'

services:
  # PostgreSQL数据库 - Keycloak使用
  postgres:
    image: postgres:15
    container_name: keycloak-postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - keycloak-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Keycloak身份认证服务器
  keycloak:
    image: quay.io/keycloak/keycloak:23.0.1
    container_name: keycloak-server
    environment:
      # 数据库配置
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak123
      
      # Keycloak管理员账户
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
      
      # 开发模式配置
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      
      # CSP配置 - 允许前端应用iframe嵌入
      KC_SPI_X_FRAME_OPTIONS_FRAME_OPTIONS: SAMEORIGIN
      KC_SPI_CONTENT_SECURITY_POLICY_FRAME_SRC: "'self' http://localhost:10801"
      KC_SPI_CONTENT_SECURITY_POLICY_FRAME_ANCESTORS: "'self' http://localhost:10801"
      
      # CORS配置 - 允许前端应用跨域请求
      KC_SPI_CORS_CORS_ALLOWED_ORIGINS: "http://localhost:10801"
      KC_SPI_CORS_CORS_ALLOWED_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
      KC_SPI_CORS_CORS_ALLOWED_HEADERS: "Origin,Accept,X-Requested-With,Content-Type,Access-Control-Request-Method,Access-Control-Request-Headers,Authorization"
      KC_SPI_CORS_CORS_EXPOSED_HEADERS: "Access-Control-Allow-Origin,Access-Control-Allow-Credentials"
      KC_SPI_CORS_CORS_ALLOW_CREDENTIALS: "true"
      KC_SPI_CORS_CORS_MAX_AGE: "1800"
    command:
      - start-dev
    ports:
      - "8180:8080"
    networks:
      - keycloak-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: ps-redis
    ports:
      - "6379:6379"
    networks:
      - keycloak-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  keycloak-network:
    driver: bridge