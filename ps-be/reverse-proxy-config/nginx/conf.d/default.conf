# PS BMP Backend SSO Reverse Proxy Configuration
# 基于 Keycloak OIDC 的反向代理配置

upstream keycloak {
    server host.docker.internal:8180;
}

upstream ps-bmp-backend {
    server host.docker.internal:8082;
}

upstream ps-fe {
    server host.docker.internal:3000;
}

server {
    listen 80;
    server_name localhost;
    
    # 设置客户端最大请求体大小
    client_max_body_size 100M;
    
    # 日志配置
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    
    # Keycloak 认证服务代理
    location /realms/ {
        proxy_pass http://keycloak/realms/;
        proxy_set_header Host $host:8180;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host:8080;
        proxy_set_header X-Forwarded-Port 8080;
        
        # 缓冲区设置
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        
        # 超时设置
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    # Keycloak 静态资源代理（优先级高于通用规则）
    location ~* ^/resources/.* {
        proxy_pass http://keycloak;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 静态资源缓存
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # CSS 文件代理（后端应用）
    location ~* \.css$ {
        proxy_pass http://ps-bmp-backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 确保正确的 MIME 类型
        add_header Content-Type text/css;
        
        # 静态资源缓存
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # JavaScript 文件代理（后端应用）
    location ~* \.js$ {
        proxy_pass http://ps-bmp-backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 确保正确的 MIME 类型
        add_header Content-Type application/javascript;
        
        # 静态资源缓存
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # 其他静态资源直接代理（无需认证）
    location ~* \.(png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://ps-bmp-backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 静态资源缓存
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # 健康检查端点（无需认证）
    location /health {
        proxy_pass http://ps-bmp-backend/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # 登录页面（无需认证）
    location = /login {
        proxy_pass http://ps-bmp-backend/login;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # SSO callback 端点（不需要认证）
    location /api/sso/callback {
        proxy_pass http://ps-bmp-backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # API 接口（需要 JWT 认证）
    location /api/ {
        # 检查 Authorization header 中的 JWT token
        set $auth_header $http_authorization;
        
        # 如果没有 Authorization header，重定向到 Keycloak 登录
        if ($auth_header = "") {
            return 302 /realms/ps-realm/protocol/openid-connect/auth?client_id=ps-realm-client&redirect_uri=http%3A%2F%2F$host:8080%2Fcallback&response_type=code&scope=openid;
        }
        
        proxy_pass http://ps-bmp-backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $auth_header;
        
        # 处理认证失败的情况
        error_page 401 = @auth_required;
    }
    
    # 前端应用（需要认证）
    location /app/ {
        # 检查是否有有效的会话或 JWT token
        set $auth_header $http_authorization;
        
        # 简单的认证检查 - 如果没有 Authorization header，重定向到登录
        if ($auth_header = "") {
            return 302 /realms/ps-realm/protocol/openid-connect/auth?client_id=ps-realm-client&redirect_uri=http%3A%2F%2F$host:8080%2Fcallback&response_type=code&scope=openid;
        }
        
        proxy_pass http://ps-fe/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $auth_header;
        
        # 处理认证失败的情况
        error_page 401 = @auth_required;
    }
    
    # 主应用根路径（需要认证）
    location / {
        # 检查是否有有效的会话或 JWT token
        set $auth_header $http_authorization;
        
        # 简单的认证检查 - 如果没有 Authorization header，重定向到登录
        if ($auth_header = "") {
            return 302 /realms/ps-bmp/protocol/openid-connect/auth?client_id=ps-bmp-client&redirect_uri=http%3A%2F%2F$host:8080%2Fcallback&response_type=code&scope=openid;
        }
        
        proxy_pass http://ps-fe;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $auth_header;
        
        # 处理认证失败的情况
        error_page 401 = @auth_required;
    }
    
    # 认证失败处理
    location @auth_required {
        return 302 http://localhost:8180/realms/ps-realm/protocol/openid-connect/auth?client_id=ps-realm-client&redirect_uri=http%3A%2F%2F$host:8080%2Fcallback&response_type=code&scope=openid;
    }
    
    # OIDC 回调处理
    location /callback {
        proxy_pass http://ps-bmp-backend/api/sso/callback;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # 错误页面
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

# HTTPS 配置（生产环境推荐）
# server {
#     listen 443 ssl http2;
#     server_name localhost;
#     
#     ssl_certificate /etc/nginx/ssl/cert.pem;
#     ssl_certificate_key /etc/nginx/ssl/key.pem;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     
#     # 其他配置与 HTTP 相同...
# }