<configuration>

	<!-- 用来定义变量值的标签 -->
	<springProperty scope="context" name="logging.name" source="spring.application.name" defaultValue="topinfo"/>
	<springProperty scope="context" name="logging.dir" source="logging.dir" defaultValue="../logs/${logging.name}"/>

	<!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】,,, -->
	<!-- appender是configuration的子节点，是负责写日志的组件。 -->
	<!-- ConsoleAppender：把日志输出到控制台 -->
	<appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.sss} [%thread] %-5level (%logger{50}:%line\) - %msg%n</pattern>
			<!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 -->
			<charset>UTF-8</charset>
		</encoder>
	</appender>

	<!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
	<!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是topinfo.log -->
	<!-- 2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名 -->
	<!-- 配置日志文件输出 DEBUG 级别 -->
	<appender name="DEBUG-LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- ch.qos.logback.classic.filter.LevelFilter 只记录指定level级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
		<!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
			<!-- 文件名：log/topinfo.2018-06-26.0.log -->
			<fileNamePattern>${logging.dir}/${logging.name}-debug.%d.%i.log</fileNamePattern>
			<!-- 每产生一个日志文件，该日志文件的保存期限为30天 -->
			<maxHistory>30</maxHistory>
			<!-- maxFileSize:这是活动文件的大小，默认值是10MB -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<!-- pattern节点，用来设置日志的输入格式 : %d %p (%file:%line\)- %m%n-->
			<pattern>
				%d{yyyy-MM-dd HH:mm:ss.sss} [%thread] %-5level (%logger{50}:%line\) - %msg%n
			</pattern>
			<!-- 记录日志的编码 -->
			<charset>UTF-8</charset> <!-- 此处设置字符集 -->
		</encoder>
	</appender>
	<!-- 配置日志文件输出 INFO 级别 -->
	<appender name="INFO-LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- ch.qos.logback.classic.filter.LevelFilter 只记录指定level级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
		<!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
			<!-- 文件名：log/topinfo.2018-06-26.0.log -->
			<fileNamePattern>${logging.dir}/${logging.name}-info.%d.%i.log</fileNamePattern>
			<!-- 每产生一个日志文件，该日志文件的保存期限为30天 -->
			<maxHistory>30</maxHistory>
			<!-- maxFileSize:这是活动文件的大小，默认值是10MB -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<!-- pattern节点，用来设置日志的输入格式 : %d %p (%file:%line\)- %m%n-->
			<pattern>
				%d{yyyy-MM-dd HH:mm:ss.sss} [%thread] %-5level (%logger{50}:%line\) - %msg%n
			</pattern>
			<!-- 记录日志的编码 -->
			<charset>UTF-8</charset> <!-- 此处设置字符集 -->
		</encoder>
	</appender>

	<!-- 配置日志文件输出 WARN 级别 -->
	<appender name="WARN-LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- ch.qos.logback.classic.filter.LevelFilter 只记录指定level级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
		<!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
			<!-- 文件名：log/topinfo.2018-06-26.0.log -->
			<fileNamePattern>${logging.dir}/${logging.name}-warn.%d.%i.log</fileNamePattern>
			<!-- 每产生一个日志文件，该日志文件的保存期限为30天 -->
			<maxHistory>30</maxHistory>
			<!-- maxFileSize:这是活动文件的大小，默认值是10MB -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<!-- pattern节点，用来设置日志的输入格式 : %d %p (%file:%line\)- %m%n-->
			<pattern>
				%d{yyyy-MM-dd HH:mm:ss.sss} [%thread] %-5level (%logger{50}:%line\) - %msg%n
			</pattern>
			<!-- 记录日志的编码 -->
			<charset>UTF-8</charset> <!-- 此处设置字符集 -->
		</encoder>
	</appender>

	<!-- 配置日志文件输出 ERROR 级别 -->
	<appender name="ERROR-LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- ch.qos.logback.classic.filter.ThresholdFilter 只记录指定level级别及以上级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>ERROR</level>
		</filter>
		<!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
		<!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
			<!-- 文件名：log/topinfo.2018-06-26.0.log -->
			<fileNamePattern>${logging.dir}/${logging.name}-error.%d.%i.log</fileNamePattern>
			<!-- 每产生一个日志文件，该日志文件的保存期限为30天 -->
			<maxHistory>30</maxHistory>
			<!-- maxFileSize:这是活动文件的大小，默认值是10MB -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<!-- pattern节点，用来设置日志的输入格式 : %d %p (%file:%line\)- %m%n-->
			<pattern>
				%d{yyyy-MM-dd HH:mm:ss.sss} [%thread] %-5level (%logger{50}:%line\) - %msg%n
			</pattern>
			<!-- 记录日志的编码 -->
			<charset>UTF-8</charset> <!-- 此处设置字符集 -->
		</encoder>
	</appender>

	<!-- 异步输出 -->
	<appender name="ASYNC-DEBUG-LOG" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>1024</queueSize>
		<!-- 新增这行为了打印栈堆信息 -->
		<includeCallerData>true</includeCallerData>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="DEBUG-LOG"/>
	</appender>
	<!-- 异步输出 -->
	<appender name="ASYNC-INFO-LOG" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>1024</queueSize>
		<!-- 新增这行为了打印栈堆信息 -->
		<includeCallerData>true</includeCallerData>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="INFO-LOG"/>
	</appender>

	<!-- 异步输出 -->
	<appender name="ASYNC-WARN-LOG" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>512</queueSize>
		<!-- 新增这行为了打印栈堆信息 -->
		<includeCallerData>true</includeCallerData>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="WARN-LOG"/>
	</appender>

	<!-- 异步输出 -->
	<appender name="ASYNC-ERROR-LOG" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>1024</queueSize>
		<!-- 新增这行为了打印栈堆信息 -->
		<includeCallerData>true</includeCallerData>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="ERROR-LOG"/>
	</appender>

	<!-- ########### 框架模块日志配置 开始 ########################################## -->

	<!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
	<!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是topinfo.log -->
	<!-- 2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名 -->
	<!-- PLATFORM 模块配置日志文件输出 INFO 级别 -->
	<appender name="DEBUG-LOG-PLATFORM" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- ch.qos.logback.classic.filter.LevelFilter 只记录指定level级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
		<!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
			<!-- 文件名：log/topinfo.2018-06-26.0.log -->
			<fileNamePattern>${logging.dir}/${logging.name}-platform-debug.%d.%i.log</fileNamePattern>
			<!-- 每产生一个日志文件，该日志文件的保存期限为30天 -->
			<maxHistory>30</maxHistory>
			<!-- maxFileSize:这是活动文件的大小，默认值是10MB -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<!-- pattern节点，用来设置日志的输入格式 : %d %p (%file:%line\)- %m%n-->
			<pattern>
				%d{yyyy-MM-dd HH:mm:ss.sss} [%thread] %-5level (%logger{50}:%line\) - %msg%n
			</pattern>
			<!-- 记录日志的编码 -->
			<charset>UTF-8</charset> <!-- 此处设置字符集 -->
		</encoder>
	</appender>

	<appender name="INFO-LOG-PLATFORM" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- ch.qos.logback.classic.filter.LevelFilter 只记录指定level级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
		<!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
			<!-- 文件名：log/topinfo.2018-06-26.0.log -->
			<fileNamePattern>${logging.dir}/${logging.name}-platform-info.%d.%i.log</fileNamePattern>
			<!-- 每产生一个日志文件，该日志文件的保存期限为30天 -->
			<maxHistory>30</maxHistory>
			<!-- maxFileSize:这是活动文件的大小，默认值是10MB -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<!-- pattern节点，用来设置日志的输入格式 : %d %p (%file:%line\)- %m%n-->
			<pattern>
				%d{yyyy-MM-dd HH:mm:ss.sss} [%thread] %-5level (%logger{50}:%line\) - %msg%n
			</pattern>
			<!-- 记录日志的编码 -->
			<charset>UTF-8</charset> <!-- 此处设置字符集 -->
		</encoder>
	</appender>

	<!-- 配置日志文件输出 ERROR-PLATFORM 级别 -->
	<appender name="ERROR-LOG-PLATFORM" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- ch.qos.logback.classic.filter.ThresholdFilter 只记录指定level级别及以上级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>ERROR</level>
		</filter>
		<!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
		<!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
			<!-- 文件名：log/topinfo.2018-06-26.0.log -->
			<fileNamePattern>${logging.dir}/${logging.name}-platform-error.%d.%i.log</fileNamePattern>
			<!-- 每产生一个日志文件，该日志文件的保存期限为30天 -->
			<maxHistory>30</maxHistory>
			<!-- maxFileSize:这是活动文件的大小，默认值是10MB -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<!-- pattern节点，用来设置日志的输入格式 : %d %p (%file:%line\)- %m%n-->
			<pattern>
				%d{yyyy-MM-dd HH:mm:ss.sss} [%thread] %-5level (%logger{50}:%line\) - %msg%n
			</pattern>
			<!-- 记录日志的编码 -->
			<charset>UTF-8</charset> <!-- 此处设置字符集 -->
		</encoder>
	</appender>

	<!-- 异步输出 -->
	<appender name="ASYNC-DEBUG-LOG-PLATFORM" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>1024</queueSize>
		<!-- 新增这行为了打印栈堆信息 -->
		<includeCallerData>true</includeCallerData>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="DEBUG-LOG-PLATFORM"/>
	</appender>

	<!-- 异步输出 -->
	<appender name="ASYNC-INFO-LOG-PLATFORM" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>1024</queueSize>
		<!-- 新增这行为了打印栈堆信息 -->
		<includeCallerData>true</includeCallerData>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="INFO-LOG-PLATFORM"/>
	</appender>

	<!-- 异步输出 -->
	<appender name="ASYNC-ERROR-LOG-PLATFORM" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能. 默认值为256  -->
		<queueSize>1024</queueSize>
		<!-- 新增这行为了打印栈堆信息 -->
		<includeCallerData>true</includeCallerData>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="ERROR-LOG-PLATFORM"/>
	</appender>

	<!-- ########### 自定义模块日志配置 结束 ########################################## -->

	<!-- 开发,测试环境  -->
	<springProfile name="dev,test">
		<!-- 控制台输出日志级别: 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG -->
		<root level="${logging.level}">
			<appender-ref ref="Console" />
			<appender-ref ref="ASYNC-INFO-LOG" />
			<appender-ref ref="ASYNC-WARN-LOG" />
			<appender-ref ref="ASYNC-ERROR-LOG" />
		</root>

		<!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 -->
		<!-- com.jiuxi为根包，也就是只要是发生在这个根包下面的所有日志操作行为的权限都是DEBUG -->
		<!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE -->
		<!-- <logger name="com.jiuxi" level="${logging.level}">
                <appender-ref  ref="LogFile" />
             </logger>
        -->

		<!-- 将org.springframework.boot.autoconfigure.logging包下INFO级别的日志输出到控制台和文件中 -->
		<logger level="INFO" name="org.springframework.boot.autoconfigure.logging"  additivity="false">
			<appender-ref ref="Console"/>
			<appender-ref ref="ASYNC-INFO-LOG" />
		</logger>

	</springProfile>

	<!-- 生产环境  -->
	<springProfile name="prod">
		<!-- 控制台输出日志级别: 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG -->
		<root level="${logging.level}">
			<!--<appender-ref ref="ASYNC-DEBUG-LOG" />-->
			<appender-ref ref="ASYNC-INFO-LOG" />
			<appender-ref ref="ASYNC-WARN-LOG" />
			<appender-ref ref="ASYNC-ERROR-LOG" />
		</root>

		<!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 -->
		<!-- com.jiuxi为根包，也就是只要是发生在这个根包下面的所有日志操作行为的权限都是DEBUG -->
		<!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE -->
		<!-- <logger name="com.jiuxi" level="${logging.level}">
                <appender-ref  ref="LogFile" />
             </logger>
        -->

		<!-- 将org.springframework.boot.autoconfigure.logging包下INFO级别的日志输出到文件中 -->
		<logger level="INFO" name="org.springframework.boot.autoconfigure.logging"  additivity="false">
			<appender-ref ref="ASYNC-INFO-LOG" />
		</logger>

		<!-- ########### 框架模块日志配置  ########################################## -->

		<!-- 将 com.jiuxi 包下INFO级别的日志输出到文件中 -->
		<logger level="INFO" name="com.jiuxi"  additivity="false">
			<appender-ref ref="ASYNC-DEBUG-LOG-PLATFORM" />
			<appender-ref ref="ASYNC-INFO-LOG-PLATFORM" />
			<appender-ref ref="ASYNC-ERROR-LOG-PLATFORM" />
		</logger>

	</springProfile>

</configuration>
